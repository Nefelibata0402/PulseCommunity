version: '3.8'
services:
  mysql:
    container_name: mysql8.0
    image: arm64v8/mysql:8.0
    restart: always
    ports:
      - "3310:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: newsCenter
    volumes:
      - /Users/wangcheng/mysql/data:/Applications/Docker.app/mysql/data
      - /Users/wangcheng/mysql/conf:/Applications/Docker.app/mysql/conf
      - /Users/wangcheng/mysql/logs:/Applications/Docker.app/mysql/logs
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
  Redis:
    container_name: redis6.2
    image: redis:6.2.1
    restart: always
    volumes:
      - /Users/wangcheng/redis/data:/Applications/Docker.app/redis/data
      - /Users/wangcheng/redis/redis.conf:/Applications/Docker.app/redis/redis.conf
    ports:
      - "6379:6379"
  mongo:
    container_name: mongo
    image: mongo:6.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    ports:
      - "27017:27017"
    volumes:
      - /Users/wangcheng/mongodb/data:/Applications/Docker.app/mongodb/db
      - /Users/wangcheng/mongodb/conf:/Applications/Docker.app/mongodb/configdb
      - /Users/wangcheng/mongodb/logs:/Applications/Docker.app/mongodb/log/
      - /Users/wangcheng/mongodb/tmp:/Applications/Docker.app/mongodb/tmp
  es01:
    container_name: es01
    image: elasticsearch:8.10.2
    networks:
      my-custom-network:
    volumes:
      - /Users/wangcheng/es/data01:/Applications/Docker.app/elasticsearch/data
      - /Users/wangcheng/es/logs01:/Applications/Docker.app/elasticsearch/logs
      - /Users/wangcheng/es/plugins01:/Applications/Docker.app/elasticsearch/plugins
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      - node.name=es01
      - cluster.name=my-cluster
      - cluster.initial_master_nodes=es01
      - discovery.seed_hosts=es02,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    privileged: true

  es02:
    container_name: es02
    image: elasticsearch:8.10.2
    networks:
      my-custom-network:
    volumes:
      - /Users/wangcheng/es/data02:/Applications/Docker.app/elasticsearch/data
      - /Users/wangcheng/es/logs02:/Applications/Docker.app/elasticsearch/logs
      - /Users/wangcheng/es/plugins02:/Applications/Docker.app/elasticsearch/plugins
    ports:
      - "9202:9200"
      - "9302:9300"
    environment:
      - node.name=es02
      - cluster.name=my-cluster
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    privileged: true
  es03:
    container_name: es03
    image: elasticsearch:8.10.2
    networks:
      my-custom-network:
    volumes:
      - /Users/wangcheng/es/data03:/Applications/Docker.app/elasticsearch/data
      - /Users/wangcheng/es/logs03:/Applications/Docker.app/elasticsearch/logs
      - /Users/wangcheng/es/plugins03:/Applications/Docker.app/elasticsearch/plugins
    ports:
      - "9203:9200"
      - "9303:9300"
    environment:
      - node.name=es03
      - cluster.name=my-cluster
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    privileged: true

  kibana01:
    image: kibana:8.10.2
    container_name: kibana01
    networks:
      my-custom-network:
    depends_on:
      - es01
      - es02
      - es03
    environment:
      SERVER_NAME: kibana01
      SERVER_HOST: "0.0.0.0"
      ELASTICSEARCH_HOSTS: http://es01:9200
    ports:
      - 5601:5601
#  minio:
#    container_name: minio
#    image: bitnami/minio:2023
#    networks:
#      my-custom-network:
#    ports:
#      - '9009:9000'
#      - '9001:9001'
#    environment:
#      - MINIO_ROOT_USER=admin
#      - MINIO_ROOT_PASSWORD=admin123456
#    volumes:
#      - /Users/wangcheng/minio/data:/Applications/Docker.app/minio/data
  Etcd:
    container_name: etcd3
    image: bitnami/etcd:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    privileged: true
    volumes:
      - /Users/wangcheng/etcd/data:/Applications/Docker.app/etcd/data
    ports:
      - 12379:2379
      - 12380:2380
#  Jaeger:
#    container_name: jaeger
#    image: jaegertracing/all-in-one:1.41
#    restart: always
#    environment:
#      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
#      - SPAN_STORAGE_TYPE=badger
#      - BADGER_EPHEMERAL=false
#      - BADGER_DIRECTORY_VALUE=/badger/data
#      - BADGER_DIRECTORY_KEY=/badger/key
#    privileged: true
#    volumes:
#      - /Users/wangcheng/jaeger:/Applications/Docker.app/jaeger/badger
#    ports:
#      - "5775:5775/udp"
#      - "6831:6831/udp"
#      - "6832:6832/udp"
#      - "5778:5778"
#      - "16686:16686"
#      - "14268:14268"
#      - "14269:14269"
#      - "9411:9411"
  kafka:
    container_name: kafka-arm
    image: 'bitnami/kafka:3.6.0'
    restart: "no"
    ports:
      - '9094:9094'
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      #sudo lsof -i :9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#  kafdrop:
#    image: obsidiandynamics/kafdrop
#    restart: "no"
#    ports:
#      - "9000:9000"
#    environment:
#      KAFKA_BROKERCONNECT: "kafka:29092"
#    depends_on:
#      - "kafka"
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.2
    volumes:
      - /Users/wangcheng/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml

    ports:
      - '9090:9090'
  grafana:
    container_name: grafana
    image: grafana/grafana-enterprise:10.2.0
    ports:
      - '3000:3000'
networks:
  my-custom-network:
    driver: bridge


#docker exec -u 0 -it {容器id} /bin/bash
#apt-get update
#apt-get install vim